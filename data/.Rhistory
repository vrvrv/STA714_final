#Sample size
M= 500
#Number of tables:  1152
#coefficients
br = runif(J, 0, 2)*(2*rbinom(J,1, 0.5)-1)
bt = runif(J, 0, 2)*(2*rbinom(J,1, 0.5)-1)
knuc = matrix(runif(J*4, 0, 2)*(2*rbinom(J*4,1, 0.5)-1), nc=4)
View(knuc)
View(knuc)
View(knuc)
#collection of all coefficients
true <- c(br, bt, knuc[,1], knuc[,2], knuc[,3], knuc[,4])
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
2*rbinom(5, 1, 0.5)-1
View(knuc)
View(knuc)
true
##Design matrix generation
x1 = c(-1, 0, 1)
x2 = c(-1, 0, 1)
comb <- cbind(rep(x1, 3), rep(x2, each=3))
View(comb)
rep(x1, 3)
xnuc = as.factor(c(1, 2, 3, 4))
xnuc2 = model.matrix(~xnuc-1, contrasts=list(xnuc="contr.treatment"))
comb2 <- cbind(rep(comb[,1], each=4), rep(comb[,2], each=4), rep(xnuc2[,1], 9),rep(xnuc2[,2], 9),rep(xnuc2[,3], 9),rep(xnuc2[,4], 9))
View(comb2)
#intensity vector per component
modelpart <- matrix(NA, nr=dim(comb2)[1], nc=J)
for(j in 1:J){
modelpart[,j] <- br[j]*comb2[,1] + bt[j]*comb2[,2] + comb2[,-c(1, 2)]%*%knuc[j,]
}
View(modelpart)
#mixing rates  J by M matrix, sampled from Dirichlet distribution
Emat  <- t(rdirichlet(M, rep(0.1, J)))
#collection of all coefficients
knuc
knuc[,1]
c(knuc[,1], knuc[,2])
true <- c(br, bt, knuc[,1], knuc[,2], knuc[,3], knuc[,4])
true
xnuc = as.factor(c(1, 2, 3, 4))
xnuc
xnuc2 = model.matrix(~xnuc-1, contrasts=list(xnuc="contr.treatment"))
xnuc2
View(comb2)
#intensity vector per component
dim(comb2)
comb2[, -c(1, 2)]
View(modelpart)
View(modelpart)
rep(0.1, J)
Emat
#mixing rates  J by M matrix, sampled from Dirichlet distribution
Emat  <- t(rdirichlet(M, rep(0.1, J)))
rpois(1, 12)
rpois(1, 12)
rpois(1, 12)
Emat = matrix(Na, nc = 5, nr = M)
Emat
Emat = matrix(NA, nc = 5, nr = M)
Emat
comb2[,0]%*%t(Emat[0,])
Emat = matrix(1, nc = 5, nr = M)
Emat
comb2[,0]%*%t(Emat[0,])
comb2[,1]%*%t(Emat[1,])
xx <- comb2[,1]%*%t(Emat[1,])
t(Emat[1,])
comb2[,1]
for(i in 1:6){
for(j in 1:J){
tmp <- matrix(comb2[,i]%*%t(Emat[j,]), nc=1)
covariates[, (i-1)*J +j] <- tmp
}
}
dim(covariates)
covariates <- matrix(NA, nc=J*dim(comb2)[2], nr=dim(countmat)[1]*dim(countmat)[2])
for(i in 1:6){
for(j in 1:J){
tmp <- matrix(comb2[,i]%*%t(Emat[j,]), nc=1)
covariates[, (i-1)*J +j] <- tmp
}
}
dim(covariates)
covariates <- matrix(NA, nc=J*dim(comb2)[2], nr=dim(countmat)[1]*dim(countmat)[2])
comb2[, 1]%*%t(Emat[0,])
comb2[, 1]%*%t(Emat[1,])
matrix(comb2[, 1]%*%t(Emat[1,]), c=1)
matrix(comb2[, 1]%*%t(Emat[1,]), nc=1)
q()
library(MCMCpack)
set.seed(202020)
#Number of hidden components
J = 5
#Sample size
M= 500
#Number of tables:  1152
#coefficients
br = runif(J, 0, 2)*(2*rbinom(J,1, 0.5)-1)
bt = runif(J, 0, 2)*(2*rbinom(J,1, 0.5)-1)
knuc = matrix(runif(J*4, 0, 2)*(2*rbinom(J*4,1, 0.5)-1), nc=4)
#collection of all coefficients
true <- c(br, bt, knuc[,1], knuc[,2], knuc[,3], knuc[,4])
##Design matrix generation
x1 = c(-1, 0, 1)
x2 = c(-1, 0, 1)
comb <- cbind(rep(x1, 3), rep(x2, each=3))
xnuc = as.factor(c(1, 2, 3, 4))
xnuc2 = model.matrix(~xnuc-1, contrasts=list(xnuc="contr.treatment"))
comb2 <- cbind(rep(comb[,1], each=4), rep(comb[,2], each=4), rep(xnuc2[,1], 9),rep(xnuc2[,2], 9),rep(xnuc2[,3], 9),rep(xnuc2[,4], 9))
#intensity vector per component
modelpart <- matrix(NA, nr=dim(comb2)[1], nc=J)
for(j in 1:J){
modelpart[,j] <- br[j]*comb2[,1] + bt[j]*comb2[,2] + comb2[,-c(1, 2)]%*%knuc[j,]
}
#mixing rates  J by M matrix, sampled from Dirichlet distribution
Emat  <- t(rdirichlet(M, rep(0.1, J)))
#intensity for each person and combination
intensityprop = matrix(NA, nc=M, nr=dim(comb2)[1])
for(k in 1:M){
tmp = 0
for(j in 1:J){
tmp = tmp + exp(modelpart[,j])*Emat[j,k]
}
intensityprop[,k] = tmp
}
#Simulating count
countmat = matrix(NA, nc=M, nr=dim(comb2)[1])
for(i in 1:dim(comb2)[1]){
for( j in 1:M){
countmat[i,j] <- rpois(1, 10000*intensityprop[i,j])
}
}
##fitting algorithm
##
covariates <- matrix(NA, nc=J*dim(comb2)[2], nr=dim(countmat)[1]*dim(countmat)[2])
for(i in 1:6){
for(j in 1:J){
tmp <- matrix(comb2[,i]%*%t(Emat[j,]), nc=1)
covariates[, (i-1)*J +j] <- tmp
}
}
dim(covariates)
response <- matrix(countmat, nc=1)
fit3 <- glm(response~covariates  ,  family=poisson(link = "log"))
plot(true, fit3$coef[-1], xlab="True", ylab="Estimate")
abline(a=0, b=1)
S = 5
#Sample size
M= 500
#Number of tables:  1152
#coefficients
br = runif(S, 0, 2)*(2*rbinom(S,1, 0.5)-1)
bt = runif(S, 0, 2)*(2*rbinom(S,1, 0.5)-1)
knuc = matrix(runif(S*4, 0, 2)*(2*rbinom(S*4,1, 0.5)-1), nc=4)
true <- c(br, bt, knuc[,1], knuc[,2], knuc[,3], knuc[,4])
x1 = c(-1, 0, 1)
x2 = c(-1, 0, 1)
comb <- cbind(rep(x1, 3), rep(x2, each=3))
xnuc = as.factor(c(1, 2, 3, 4))
xnuc2 = model.matrix(~xnuc-1, contrasts=list(xnuc="contr.treatment"))
comb2 <- cbind(rep(comb[,1], each=4), rep(comb[,2], each=4), rep(xnuc2[,1], 9),rep(xnuc2[,2], 9),rep(xnuc2[,3], 9),rep(xnuc2[,4], 9))
#intensity vector per component
modelpart <- matrix(NA, nr=dim(comb2)[1], nc=S)
for(s in 1:S){
modelpart[,s] <- br[s]*comb2[,1] + bt[s]*comb2[,2] + comb2[,-c(1, 2)]%*%knuc[s,]
}
#intensity for each person and combination
intensityprop = matrix(NA, nc=N, nr=dim(comb2)[1])
for(n in 1:N){
tmp = 0
for(s in 1:S){
tmp = tmp + exp(modelpart[,s])*Emat[s,n]
}
intensityprop[,n] = tmp
}
N= 500
intensityprop = matrix(NA, nc=N, nr=dim(comb2)[1])
for(n in 1:N){
tmp = 0
for(s in 1:S){
tmp = tmp + exp(modelpart[,s])*Emat[s,n]
}
intensityprop[,n] = tmp
}
countmat = matrix(NA, nc=N, nr=dim(comb2)[1])
for(i in 1:dim(comb2)[1]){
for( n in 1:N){
countmat[i,n] <- rpois(1, 10000*intensityprop[i,n])
}
}
for(i in 1:6){
for(s in 1:S){
tmp <- matrix(comb2[,i]%*%t(Emat[s,]), nc=1)
covariates[, (i-1)*S +s] <- tmp
}
}
dim(covariates)
response <- matrix(countmat, nc=1)
fit3 <- glm(response~covariates  ,  family=poisson(link = "log"))
plot(true, fit3$coef[-1], xlab="True", ylab="Estimate")
abline(a=0, b=1)
dim(true)
true <- c(br, bt, knuc[,1], knuc[,2], knuc[,3], knuc[,4])
true
br
fit3.summary()
fit3
getwd()
data=read.csv("missing.csv")
###complete-case
###mean imputation within imputation cells,
library(tree)
library(caret)
treemod<-tree(MEDV~INDUS + AGE + DIS + PTRATIO + B, data=data)
plot(treemod)
text(treemod)
tree.prune=cv.tree(treemod)
plot(tree.prune)
tree.prune$size
tree.prune$dev
treemod2=prune.tree(treemod,best=4)
plot(treemod2)
text(treemod2)
data_miic = data
miic_ind_1=which(data_miic$INDUS<6.66)
miic_ind_2=which(data_miic$INDUS>=6.66 & data_miic$DIS < 1.3714)
miic_ind_3=which(data_miic$INDUS>=6.66 & data_miic$DIS >= 1.3714 &data_miic$DIS<1.8727)
miic_ind_4=which(data_miic$INDUS>=6.66 & data_miic$DIS >= 1.3714 &data_miic$DIS>=1.8727)
#rm ì±„ìš°ê¸?
miic_mean_rm_1=mean(data_miic$RM[miic_ind_1], na.rm = TRUE)
data_miic$RM[which(data_miic$INDUS<6.66&is.na(data$RM))] = miic_mean_rm_1
miic_mean_rm_2=mean(data_miic$RM[miic_ind_2], na.rm = TRUE)
data_miic$RM[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO < 0.5 &is.na(data$RM))] = miic_mean_rm_2
miic_mean_rm_3=mean(data_miic$RM[miic_ind_3], na.rm = TRUE)
data_miic$RM[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS<1.35735&is.na(data$RM))] = miic_mean_rm_3
miic_mean_rm_4=mean(data_miic$RM[miic_ind_4], na.rm = TRUE)
data_miic$RM[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS>=1.35735&is.na(data$RM))] = miic_mean_rm_4
mean(data_miic$RM)
#LSTAT ì±„ìš°ê¸?
miic_mean_lstat_1=mean(data_miic$LSTAT[miic_ind_1], na.rm = TRUE)
data_miic$LSTAT[which(data_miic$INDUS<6.66&is.na(data$LSTAT))] = miic_mean_lstat_1
miic_mean_lstat_2=mean(data_miic$LSTAT[miic_ind_2], na.rm = TRUE)
data_miic$LSTAT[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO < 0.5 &is.na(data$LSTAT))] = miic_mean_lstat_2
miic_mean_lstat_3=mean(data_miic$LSTAT[miic_ind_3], na.rm = TRUE)
data_miic$LSTAT[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS<1.35735 &is.na(data$LSTAT))] = miic_mean_lstat_3
miic_mean_lstat_4=mean(data_miic$LSTAT[miic_ind_4], na.rm = TRUE)
data_miic$LSTAT[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS>=1.35735&is.na(data$LSTAT))] = miic_mean_lstat_4
mean(data_miic$LSTAT)
#RAD ì±„ìš°ê¸?
miic_mean_rad_1=mean(data_miic$RAD[miic_ind_1], na.rm = TRUE)
miic_mean_rad_1=round(miic_mean_rad_1)
data_miic$RAD[which(data_miic$INDUS<6.66&is.na(data$RAD))] = miic_mean_rad_1
miic_mean_rad_2=mean(data_miic$RAD[miic_ind_2], na.rm = TRUE)
miic_mean_rad_2=round(miic_mean_rad_2)
data_miic$RAD[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO < 0.5&is.na(data$RAD))] = miic_mean_rad_2
miic_mean_rad_3=mean(data_miic$RAD[miic_ind_3], na.rm = TRUE)
miic_mean_rad_3=round(miic_mean_rad_3)
data_miic$RAD[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS<1.35735 &is.na(data$RAD))] = miic_mean_rad_3
miic_mean_rad_4=mean(data_miic$RAD[miic_ind_4], na.rm = TRUE)
miic_mean_rad_4=round(miic_mean_rad_4)
data_miic$RAD[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS>=1.35735&is.na(data$RAD))] = miic_mean_rad_4
mean(data_miic$RAD)
write.csv(data_miic, file="./imp/miic.csv", row.names = F)
###stochastic regression imputation,
library(mice)
data_si=data
imp <- mice(data_si, method = "norm.nob", m = 1) # Impute data
data_sto <- complete(imp) # Store data
write.csv(data_sto, file="./imp/sri.csv", row.names = F)
###simple, hotdeck w/ imputation cells,
library(VIM)
data_hotdeck=data
data_hd_simple=hotdeck(data_hotdeck, variable = c("RM", "RAD", "LSTAT"))
write.csv(data_hd_simple, file="./imp/hotdeck_sim.csv", row.names = F)
###hotdeck w/ imputation cells,
data_hotdeck_ic=data
idx=c(1:length(data$INDUS))
data_hotdeck_ic=cbind(data_hotdeck_ic,idx)
hdic_ind_1=which(data_hotdeck_ic$INDUS<6.66)
hdic_ind_2=which(data_hotdeck_ic$INDUS>=6.66 & data_hotdeck_ic$PTRATIO < 0.5)
hdic_ind_3=which(data_hotdeck_ic$INDUS>=6.66 & data_hotdeck_ic$PTRATIO >= 0.5 &data_hotdeck_ic$DIS<1.35735)
hdic_ind_4=which(data_hotdeck_ic$INDUS>=6.66 & data_hotdeck_ic$PTRATIO >= 0.5 &data_hotdeck_ic$DIS>=1.35735)
data_hiic_1=hotdeck(data_hotdeck_ic[hdic_ind_1,],variable=c("RM", "RAD", "LSTAT"))
data_hiic_2=hotdeck(data_hotdeck_ic[hdic_ind_2,],variable=c("RM", "RAD", "LSTAT"))
data_hiic_3=hotdeck(data_hotdeck_ic[hdic_ind_3,],variable=c("RM", "RAD", "LSTAT"))
data_hiic_4=hotdeck(data_hotdeck_ic[hdic_ind_4,],variable=c("RM", "RAD", "LSTAT"))
data_hotdeck_ic=rbind(data_hiic_1,data_hiic_2,data_hiic_3,data_hiic_4)
data_hotdeck_ic$RAD = round(data_hotdeck_ic$RAD)
data_hotdeck_ic$RAD[which(data_hotdeck_ic$RAD<0)]=1
data_hotdeck_ic_order = data_hotdeck_ic[order(data_hotdeck_ic$idx)]
write.csv(data_hotdeck_ic, file="./imp/hotdeck_imp", row.names = F)
write.csv(data_hotdeck_ic, file="./imp/hotdeck_imp.csv", row.names = F)
write.csv(data_hd_simple, file="./imp/hotdeck_sim.csv", row.names = F)
data=read.csv("missing.csv")
getwd()
setwd("~/Dropbox/Class-Material/Missing Data/midterm/data")
getwd()
data=read.csv("missing.csv")
###mean imputation within imputation cells,
library(tree)
library(caret)
treemod<-tree(MEDV~INDUS + AGE + DIS + PTRATIO + B, data=data)
plot(treemod)
text(treemod)
tree.prune=cv.tree(treemod)
plot(tree.prune)
tree.prune$size
tree.prune$dev
treemod2=prune.tree(treemod,best=4)
plot(treemod2)
text(treemod2)
data_miic = data
miic_ind_1=which(data_miic$INDUS<6.66)
miic_ind_2=which(data_miic$INDUS>=6.66 & data_miic$DIS < 1.3714)
miic_ind_3=which(data_miic$INDUS>=6.66 & data_miic$DIS >= 1.3714 &data_miic$DIS<1.8727)
miic_ind_4=which(data_miic$INDUS>=6.66 & data_miic$DIS >= 1.3714 &data_miic$DIS>=1.8727)
#rm ì±„ìš°ê¸?
miic_mean_rm_1=mean(data_miic$RM[miic_ind_1], na.rm = TRUE)
data_miic$RM[which(data_miic$INDUS<6.66&is.na(data$RM))] = miic_mean_rm_1
miic_mean_rm_2=mean(data_miic$RM[miic_ind_2], na.rm = TRUE)
data_miic$RM[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO < 0.5 &is.na(data$RM))] = miic_mean_rm_2
miic_mean_rm_3=mean(data_miic$RM[miic_ind_3], na.rm = TRUE)
data_miic$RM[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS<1.35735&is.na(data$RM))] = miic_mean_rm_3
miic_mean_rm_4=mean(data_miic$RM[miic_ind_4], na.rm = TRUE)
data_miic$RM[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS>=1.35735&is.na(data$RM))] = miic_mean_rm_4
mean(data_miic$RM)
#LSTAT ì±„ìš°ê¸?
miic_mean_lstat_1=mean(data_miic$LSTAT[miic_ind_1], na.rm = TRUE)
data_miic$LSTAT[which(data_miic$INDUS<6.66&is.na(data$LSTAT))] = miic_mean_lstat_1
miic_mean_lstat_2=mean(data_miic$LSTAT[miic_ind_2], na.rm = TRUE)
data_miic$LSTAT[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO < 0.5 &is.na(data$LSTAT))] = miic_mean_lstat_2
miic_mean_lstat_3=mean(data_miic$LSTAT[miic_ind_3], na.rm = TRUE)
data_miic$LSTAT[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS<1.35735 &is.na(data$LSTAT))] = miic_mean_lstat_3
miic_mean_lstat_4=mean(data_miic$LSTAT[miic_ind_4], na.rm = TRUE)
data_miic$LSTAT[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS>=1.35735&is.na(data$LSTAT))] = miic_mean_lstat_4
mean(data_miic$LSTAT)
#RAD ì±„ìš°ê¸?
miic_mean_rad_1=mean(data_miic$RAD[miic_ind_1], na.rm = TRUE)
miic_mean_rad_1=round(miic_mean_rad_1)
data_miic$RAD[which(data_miic$INDUS<6.66&is.na(data$RAD))] = miic_mean_rad_1
miic_mean_rad_2=mean(data_miic$RAD[miic_ind_2], na.rm = TRUE)
miic_mean_rad_2=round(miic_mean_rad_2)
data_miic$RAD[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO < 0.5&is.na(data$RAD))] = miic_mean_rad_2
miic_mean_rad_3=mean(data_miic$RAD[miic_ind_3], na.rm = TRUE)
miic_mean_rad_3=round(miic_mean_rad_3)
data_miic$RAD[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS<1.35735 &is.na(data$RAD))] = miic_mean_rad_3
miic_mean_rad_4=mean(data_miic$RAD[miic_ind_4], na.rm = TRUE)
miic_mean_rad_4=round(miic_mean_rad_4)
data_miic$RAD[which(data_miic$INDUS>=6.66 & data_miic$PTRATIO >= 0.5 &data_miic$DIS>=1.35735&is.na(data$RAD))] = miic_mean_rad_4
mean(data_miic$RAD)
write.csv(data_miic, file="./imp/miic.csv", row.names = F)
###stochastic regression imputation,
library(mice)
data_si=data
imp <- mice(data_si, method = "norm.nob", m = 1) # Impute data
data_sto <- complete(imp) # Store data
write.csv(data_sto, file="./imp/sri.csv", row.names = F)
###simple, hotdeck w/ imputation cells,
library(VIM)
data_hotdeck=data
data_hd_simple=hotdeck(data_hotdeck, variable = c("RM", "RAD", "LSTAT"))
write.csv(data_hd_simple, file="./imp/hotdeck_sim.csv", row.names = F)
###hotdeck w/ imputation cells,
data_hotdeck_ic=data
idx=c(1:length(data$INDUS))
data_hotdeck_ic=cbind(data_hotdeck_ic,idx)
hdic_ind_1=which(data_hotdeck_ic$INDUS<6.66)
hdic_ind_2=which(data_hotdeck_ic$INDUS>=6.66 & data_hotdeck_ic$PTRATIO < 0.5)
hdic_ind_3=which(data_hotdeck_ic$INDUS>=6.66 & data_hotdeck_ic$PTRATIO >= 0.5 &data_hotdeck_ic$DIS<1.35735)
hdic_ind_4=which(data_hotdeck_ic$INDUS>=6.66 & data_hotdeck_ic$PTRATIO >= 0.5 &data_hotdeck_ic$DIS>=1.35735)
data_hiic_1=hotdeck(data_hotdeck_ic[hdic_ind_1,],variable=c("RM", "RAD", "LSTAT"))
data_hiic_2=hotdeck(data_hotdeck_ic[hdic_ind_2,],variable=c("RM", "RAD", "LSTAT"))
data_hiic_3=hotdeck(data_hotdeck_ic[hdic_ind_3,],variable=c("RM", "RAD", "LSTAT"))
data_hiic_4=hotdeck(data_hotdeck_ic[hdic_ind_4,],variable=c("RM", "RAD", "LSTAT"))
data_hotdeck_ic=rbind(data_hiic_1,data_hiic_2,data_hiic_3,data_hiic_4)
data_hotdeck_ic$RAD = round(data_hotdeck_ic$RAD)
data_hotdeck_ic$RAD[which(data_hotdeck_ic$RAD<0)]=1
data_hotdeck_ic_order = data_hotdeck_ic[order(data_hotdeck_ic$idx)]
write.csv(data_hotdeck_ic, file="./imp/hotdeck_imp.csv", row.names = F)
data_hotdeck_ic=cbind(data_hotdeck_ic,idx)
hdic_ind_1=which(data_hotdeck_ic$INDUS<6.66)
hdic_ind_2=which(data_hotdeck_ic$INDUS>=6.66 & data_hotdeck_ic$DIS < 1.3714)
hdic_ind_3=which(data_hotdeck_ic$INDUS>=6.66 & data_hotdeck_ic$DIS >= 1.3714 &data_hotdeck_ic$DIS<1.8727)
hdic_ind_4=which(data_hotdeck_ic$INDUS>=6.66 & data_hotdeck_ic$DIS >= 1.3714 &data_hotdeck_ic$DIS>=1.8727)
data_hiic_1=hotdeck(data_hotdeck_ic[hdic_ind_1,],variable=c("RM", "RAD", "LSTAT"))
data_hiic_2=hotdeck(data_hotdeck_ic[hdic_ind_2,],variable=c("RM", "RAD", "LSTAT"))
data_hiic_3=hotdeck(data_hotdeck_ic[hdic_ind_3,],variable=c("RM", "RAD", "LSTAT"))
data_hiic_4=hotdeck(data_hotdeck_ic[hdic_ind_4,],variable=c("RM", "RAD", "LSTAT"))
data_hotdeck_ic=rbind(data_hiic_1,data_hiic_2,data_hiic_3,data_hiic_4)
data_hotdeck_ic$RAD = round(data_hotdeck_ic$RAD)
data_hotdeck_ic$RAD[which(data_hotdeck_ic$RAD<0)]=1
data_hotdeck_ic_order = data_hotdeck_ic[order(data_hotdeck_ic$idx)]
write.csv(data_hotdeck_ic, file="./imp/hotdeck_imp.csv", row.names = F)
getwd()
library(DMwR)
test<-read.csv("./data/test.csv")
train<-read.csv("/data/train.csv")
test<-read.csv("test.csv")
train<-read.csv("train.csv")
#ptratio- when continous variable
train3<-train
model3<-lm(MEDV~.,data=train3)
summary(model3)
#prtatio ¹üÁÖÇüÀ¸·Î
train2<-train
train2[,6]<-as.factor(train[,6])
str(train2)   #µ¥ÀÌÅÍ È®ÀÎ
##È¸±ÍºÐ¼® ½ÇÇà
model<-lm(MEDV~.,data=train2) #È¸±ÍºÐ¼® ÄÚµå
summary(model) #°á°ú È®ÀÎ
##¿¹Ãø
test2<-test
test2[,6]<-as.factor(test2[,6])
test_predict<-predict(model, test2) #¿¹ÃøÀ» ¼öÇàÇÒ »õ·Î¿î µ¥ÀÌÅÍ ÀÔ·Â
#ºñ±³
regr.eval(test2$MEDV, test_predict)
train2$PTRATIO
#hotdeck simple within cells
hd<-read.csv("./imp/hotdeck_sim.csv")
hd<-hd[,-c(10,11,12)]
model.hd<-lm(MEDV~.,data=hd)
summary(model.hd)
test_predict<-predict(model.hd, test)
eval1<-regr.eval(test$MEDV, test_predict)
#hotdeck with imputation cells
hdc<-read.csv("./imp/hotdeck_imp.csv")
hdc<-hdc[,-c(10,11,12)]
model.hdc<-lm(MEDV~.,data=hdc)
summary(model.hdc)
test_predict<-predict(model.hdc, test)
eval2<-regr.eval(test$MEDV, test_predict)
#hotdeck with imputation cells
hdc<-read.csv("./imp/hotdeck_imp.csv")
#hotdeck simple within cells
hd<-read.csv("./imp/hotdeck_sim.csv")
hd<-hd[,-c(10,11,12)]
model.hd<-lm(MEDV~.,data=hd)
summary(model.hd)
test_predict<-predict(model.hd, test)
eval1<-regr.eval(test$MEDV, test_predict)
#hotdeck with imputation cells
hdc<-read.csv("./imp/hotdeck_imp.csv")
hdc<-hdc[,-c(10,11,12)]
model.hdc<-lm(MEDV~.,data=hdc)
summary(model.hdc)
test_predict<-predict(model.hdc, test)
hdc<-hdc[,-c(10,11,12)]
model.hdc<-lm(MEDV~.,data=hdc)
summary(model.hdc)
test_predict<-predict(model.hdc, test)
View(model.hd)
View(model.hdc)
hdc
#hotdeck with imputation cells
hdc<-read.csv("./imp/hotdeck_imp.csv")
hdc
hdc<-hdc[,-c(8,9,10,11,12)]
hdc
#hotdeck with imputation cells
hdc<-read.csv("./imp/hotdeck_imp.csv")
hdc<-hdc[c(1,2,3,4,5,6,7),]
hdc
#hotdeck with imputation cells
hdc<-read.csv("./imp/hotdeck_imp.csv")
hdc<-hdc[,c(1,2,3,4,5,6,7)]
hdc
#hotdeck with imputation cells
hdc<-read.csv("./imp/hotdeck_imp.csv")
hdc<-hdc[,c(1,2,3,4,5,6,7,8)]
hdc
#hotdeck with imputation cells
hdc<-read.csv("./imp/hotdeck_imp.csv")
hdc<-hdc[,c(1,2,3,4,5,6,7,8,9)]
hdc
#hotdeck with imputation cells
hdc<-read.csv("./imp/hotdeck_imp.csv")
hdc<-hdc[,c(1,2,3,4,5,6,7,8,9,10)]
hdc
#hotdeck simple within cells
hd<-read.csv("./imp/hotdeck_sim.csv")
hd<-hd[,c(1:9)]
model.hd<-lm(MEDV~.,data=hd)
summary(model.hd)
test_predict<-predict(model.hd, test)
eval1<-regr.eval(test$MEDV, test_predict)
#hotdeck with imputation cells
hdc<-read.csv("./imp/hotdeck_imp.csv")
hdc<-hdc[,c(1,2,3,4,5,6,7,8,9)]
model.hdc<-lm(MEDV~.,data=hdc)
summary(model.hdc)
test_predict<-predict(model.hdc, test)
eval2<-regr.eval(test$MEDV, test_predict)
#miic
mi<-read.csv("./imp/miic.csv")
mi<-mi[,c(1:9)]
model.mi<-lm(MEDV~.,data=mi)
summary(model.mi)
test_predict<-predict(model.mi, test)
eval3<-regr.eval(test$MEDV, test_predict)
#stochastic regression imputation
sr<-read.csv("./imp/sri.csv")
sr<-sr[,c(1:9)]
model.sr<-lm(MEDV~.,data=sr)
summary(model.sr)
test_predict<-predict(model.sr, test)
eval4<-regr.eval(test$MEDV, test_predict)
ls(pattern = "eval")
list_eval <- mget(ls(pattern = "eval"))
list_eval
